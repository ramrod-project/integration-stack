# Docker swarm configuration for PCP application stack
# This file contains all of the configurations for
# starting up and running the necessary containers
# as services in a docker stack.
# TODO:
# - add $TAG environment variable to specify which version (dev,qa,latest)
# - rework cronjob to pull from dev

version: "3.4"

# In a docker swarm, each container is run as a 'service',
# which is managed by docker through the swarm as opposed
# to directly as with regular containers.
#
# These pull from the latest images on the project docker
# hub.
services:
  # Config information for the frontend container service
  frontend:
    image: ramrodpcp/frontend-ui:${TAG}
    deploy:
      restart_policy:
        condition: on-failure
    networks:
      pcp:
        aliases:
          - frontend
    ports:
      - 8080:8080
    environment:
      - STAGE=PROD
  # Config information for the frontend container service
  websockets:
    image: ramrodpcp/websocket-server:${TAG}
    deploy:
      restart_policy:
        condition: on-failure
    networks:
      pcp:
        aliases:
          - websockets
    ports:
      - 3000:3000
    environment:
      - STAGE=PROD
  # Config information for the RethinkDB container service
  database:
    image: ramrodpcp/database-brain:${TAG}
    deploy:
      restart_policy:
        condition: on-failure
    networks:
      pcp:
        aliases:
          - rethinkdb
    volumes:
      - '${LOGDIR}/db_logs:/logs'
      - brain-volume:/mnt/fuse
  # Config information for the backend container service
  backend:
    image: ramrodpcp/backend-interpreter:${TAG}
    deploy:
      restart_policy:
        condition: on-failure
    networks:
      pcp:
        aliases:
          - controller
    # This container requires a couple environment variables
    # to be passed in. These are taken from the environment
    # in which the stack is run.
    environment:
      - START_HARNESS=${START_HARNESS}
      - STAGE=PROD
      - LOGLEVEL=${LOGLEVEL}
      - TRAVIS_BRANCH=${TAG}
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'

# The 'networks' section defines the internal docker
# networks that will be used by the application stack.
networks:
  pcp:
    external: true

volumes:
  brain-volume:
    name: brain-volume